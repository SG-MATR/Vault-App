/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TagsRouteImport } from './routes/tags'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NotesIndexRouteImport } from './routes/notes/index'
import { Route as NotesNewRouteImport } from './routes/notes/new'
import { Route as NotesNoteIdIndexRouteImport } from './routes/notes/$noteId/index'
import { Route as NotesNoteIdEditRouteImport } from './routes/notes/$noteId/edit'

const TagsRoute = TagsRouteImport.update({
  id: '/tags',
  path: '/tags',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesIndexRoute = NotesIndexRouteImport.update({
  id: '/notes/',
  path: '/notes/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesNewRoute = NotesNewRouteImport.update({
  id: '/notes/new',
  path: '/notes/new',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesNoteIdIndexRoute = NotesNoteIdIndexRouteImport.update({
  id: '/notes/$noteId/',
  path: '/notes/$noteId/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesNoteIdEditRoute = NotesNoteIdEditRouteImport.update({
  id: '/notes/$noteId/edit',
  path: '/notes/$noteId/edit',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tags': typeof TagsRoute
  '/notes/new': typeof NotesNewRoute
  '/notes': typeof NotesIndexRoute
  '/notes/$noteId/edit': typeof NotesNoteIdEditRoute
  '/notes/$noteId': typeof NotesNoteIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tags': typeof TagsRoute
  '/notes/new': typeof NotesNewRoute
  '/notes': typeof NotesIndexRoute
  '/notes/$noteId/edit': typeof NotesNoteIdEditRoute
  '/notes/$noteId': typeof NotesNoteIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/tags': typeof TagsRoute
  '/notes/new': typeof NotesNewRoute
  '/notes/': typeof NotesIndexRoute
  '/notes/$noteId/edit': typeof NotesNoteIdEditRoute
  '/notes/$noteId/': typeof NotesNoteIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/tags'
    | '/notes/new'
    | '/notes'
    | '/notes/$noteId/edit'
    | '/notes/$noteId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/tags'
    | '/notes/new'
    | '/notes'
    | '/notes/$noteId/edit'
    | '/notes/$noteId'
  id:
    | '__root__'
    | '/'
    | '/tags'
    | '/notes/new'
    | '/notes/'
    | '/notes/$noteId/edit'
    | '/notes/$noteId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TagsRoute: typeof TagsRoute
  NotesNewRoute: typeof NotesNewRoute
  NotesIndexRoute: typeof NotesIndexRoute
  NotesNoteIdEditRoute: typeof NotesNoteIdEditRoute
  NotesNoteIdIndexRoute: typeof NotesNoteIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tags': {
      id: '/tags'
      path: '/tags'
      fullPath: '/tags'
      preLoaderRoute: typeof TagsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/': {
      id: '/notes/'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/new': {
      id: '/notes/new'
      path: '/notes/new'
      fullPath: '/notes/new'
      preLoaderRoute: typeof NotesNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/$noteId/': {
      id: '/notes/$noteId/'
      path: '/notes/$noteId'
      fullPath: '/notes/$noteId'
      preLoaderRoute: typeof NotesNoteIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/$noteId/edit': {
      id: '/notes/$noteId/edit'
      path: '/notes/$noteId/edit'
      fullPath: '/notes/$noteId/edit'
      preLoaderRoute: typeof NotesNoteIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TagsRoute: TagsRoute,
  NotesNewRoute: NotesNewRoute,
  NotesIndexRoute: NotesIndexRoute,
  NotesNoteIdEditRoute: NotesNoteIdEditRoute,
  NotesNoteIdIndexRoute: NotesNoteIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
